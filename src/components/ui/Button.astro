---
// CallToAction.astro
import { Icon } from 'astro-icon/components';
import { twMerge } from 'tailwind-merge';
import type { CallToAction as Props } from '~/types';

const {
  variant = 'secondary',
  target,
  text = Astro.slots.render('default'),
  icon = '',
  class: className = '',
  type,
  subtext = '', // ðŸ‘ˆ NEW
  ...rest
} = Astro.props;

const variants = {
  primary: 'btn-primary',
  secondary: 'btn-secondary',
  tertiary: 'btn btn-tertiary',
  link: 'cursor-pointer hover:text-primary',
};
---

{/*
  Si subtext est fourni, on wrappe le bouton/lien pour pouvoir afficher le texte en-dessous.
*/}
{
  subtext ? (
    <div class="inline-flex flex-col items-center">
      {
        type === 'button' || type === 'submit' || type === 'reset' ? (
          <button
            type={type}
            class={twMerge(variants[variant] || '', className)}
            {...(target ? { target, rel: 'noopener noreferrer' } : {})}
            {...rest}
          >
            <Fragment set:html={text} />
            {icon && <Icon name={icon} class="w-5 h-5 ml-1 -mr-1.5 rtl:mr-1 rtl:-ml-1.5 inline-block" />}
          </button>
        ) : (
          <a
            class={twMerge(variants[variant] || '', className)}
            {...(target ? { target, rel: 'noopener noreferrer' } : {})}
            {...rest}
          >
            <Fragment set:html={text} />
            {icon && <Icon name={icon} class="w-5 h-5 ml-1 -mr-1.5 rtl:mr-1 rtl:-ml-1.5 inline-block" />}
          </a>
        )
      }
      <small class="mt-1 text-xs md:text-sm text-accent">{(subtext)}</small>
    </div>
  ) : (
    // Comportement inchangÃ© si pas de subtext
    (type === 'button' || type === 'submit' || type === 'reset') ? (
      <button
        type={type}
        class={twMerge(variants[variant] || '', className)}
        {...(target ? { target, rel: 'noopener noreferrer' } : {})}
        {...rest}
      >
        <Fragment set:html={text} />
        {icon && <Icon name={icon} class="w-5 h-5 ml-1 -mr-1.5 rtl:mr-1 rtl:-ml-1.5 inline-block" />}
      </button>
    ) : (
      <a
        class={twMerge(variants[variant] || '', className)}
        {...(target ? { target, rel: 'noopener noreferrer' } : {})}
        {...rest}
      >
        <Fragment set:html={text} />
        {icon && <Icon name={icon} class="w-5 h-5 ml-1 -mr-1.5 rtl:mr-1 rtl:-ml-1.5 inline-block" />}
      </a>
    )
  )
}
