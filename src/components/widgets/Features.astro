---
import Headline from '~/components/ui/Headline.astro';
import ItemGrid from '~/components/ui/ItemGrid.astro';
import WidgetWrapper from '~/components/ui/WidgetWrapper.astro';
import type { Features as Props } from '~/types';
import Button from '../ui/Button.astro';

const {
  title = await Astro.slots.render('title'),
  subtitle = await Astro.slots.render('subtitle'),
  tagline = await Astro.slots.render('tagline'),
  items = [],
  columns = 2,
  callToAction1 = await Astro.slots.render('actions'),
  defaultIcon,

  id,
  isDark = false,
  classes = {},
  bg = await Astro.slots.render('bg'),
} = Astro.props;
---

<WidgetWrapper
  id={id}
  isDark={isDark}
  containerClass={`max-w-7xl px-6 md:px-8 ${classes?.container ?? ''}`}
  bg={bg}
>
  <Headline title={title} subtitle={subtitle} tagline={tagline} classes={classes?.headline as Record<string, string>} />
    
  <ItemGrid
    items={items}
    columns={columns}
    defaultIcon={defaultIcon}
    classes={{
      container: '',
      title: 'md:text-[1.3rem]',
      icon: 'text-secondary bg-primary rounded-full w-10 h-10 p-2 md:w-12 md:h-12 md:p-3 mr-4 rtl:ml-4 rtl:mr-0',
      ...((classes?.items as Record<string, never>) ?? {}),
    }}
  />

  {
    callToAction1 && (
      <div class="max-w-xs sm:max-w-md m-auto flex flex-nowrap flex-col sm:flex-row sm:justify-center  mt-8 intersect-once intersect-quarter motion-safe:md:opacity-0 motion-safe:md:intersect:animate-fade">
        {Array.isArray(callToAction1) ? (
          callToAction1.map((action) => (
            <div class="flex w-full sm:w-auto">
              <Button {...(action || {})} class="w-full " />
            </div>
          ))
        ) : (
          <Fragment set:html={callToAction1} />
        )}
      </div>
    )
  }
  <div class="m-auto motion-safe:md:opacity-0 text-center motion-safe:md:intersect:animate-fade mt-4">
    <slot name="ctaDetails" />
  </div>
</WidgetWrapper>
