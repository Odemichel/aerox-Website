---
import { Icon } from 'astro-icon/components';
import Logo from '~/components/Logo.astro';
import ToggleMenu from '~/components/common/ToggleMenu.astro';
import ToggleTheme from '~/components/common/ToggleTheme.astro';
import Button from '~/components/ui/Button.astro';

import type { CallToAction } from '~/types';
import { getHomePermalink, trimSlash } from '~/utils/permalinks';

interface Link {
  text?: string;
  href?: string;
  ariaLabel?: string;
  icon?: string;
}
export type HeaderProps = Props;

interface MenuLink extends Link {
  links?: Array<MenuLink>;
}

export interface Props {
  id?: string;
  links?: Array<MenuLink>;
  actions?: Array<CallToAction>;
  isSticky?: boolean;
  isDark?: boolean;
  isFullWidth?: boolean;
  showToggleTheme?: boolean;
  showRssFeed?: boolean;
  position?: string;
}

const {
  id = 'header',
  links = [],
  actions = [],
  isSticky = false,
  isDark = false,
  showToggleTheme = false,
  position = 'center',
} = Astro.props;

const currentPath = `/${trimSlash(new URL(Astro.url).pathname)}`;
---

<header
  class:list={[
    { sticky: isSticky, relative: !isSticky, dark: isDark },
    'top-0 z-40 flex-none mx-auto w-full border-b border-gray-50/0 transition-[opacity] ease-in-out',
  ]}
  {...isSticky ? { 'data-aw-sticky-header': true } : {}}
  {...id ? { id } : {}}
>
  <div class="absolute inset-0 pointer-events-none -z-10"></div>
  <div
  class="relative text-default py-3 px-3 sm:px-6 mx-auto w-full max-w-7xl
         grid grid-cols-[auto_1fr_auto] items-center gap-3">
    <div class:list={[{ 'mr-auto rtl:mr-0 rtl:ml-auto': position === 'right' }, 'flex justify-between']}>
      <a class="flex items-center" href={getHomePermalink()}>
        <Logo />
      </a>
      <div class="flex items-center sm:hidden">
        <ToggleMenu />
      </div>
    </div>
    <nav class="items-center w-full sm:w-auto hidden sm:flex sm:mx-5 text-default
            overflow-y-auto overflow-x-hidden sm:overflow-visible sm:justify-self-center" aria-label="Main navigation">

      <ul
        class="flex flex-col sm:flex-row sm:self-center w-full sm:w-auto text-xl sm:text-[0.9375rem] tracking-[0.01rem] font-medium sm:justify-center"
      >
        {
          links.map(({ text, href, links }) => (
            <li class={links?.length ? 'dropdown' : ''}>
              {links?.length ? (
                <>
                  <button
                    type="button"
                    class="hover:text-link dark:hover:text-white px-4 py-3 flex items-center whitespace-nowrap"
                  >
                    {text}{' '}
                    <Icon name="tabler:menu-2" class="w-6 h-6 sm:w-8  sm:h-8   ml-0.5 rtl:ml-0 rtl:mr-0.5 hidden sm:inline" />
                  </button>
                  <ul class="dropdown-menu sm:backdrop-blur-md dark:sm:bg-dark rounded sm:absolute pl-4 sm:pl-0 sm:hidden font-medium sm:bg-white/90 sm:min-w-[200px] drop-shadow-xl">
                    {links.map(({ text: text2, href: href2 }) => (
                      <li>
                        <a
                          class:list={[
                            'first:rounded-t last:rounded-b sm:hover:bg-gray-100 hover:text-link dark:hover:text-white dark:hover:bg-gray-700 py-2 px-5 block whitespace-no-wrap',
                            { 'aw-link-active': href2 === currentPath },
                          ]}
                          href={href2}
                        >
                          {text2}
                        </a>
                      </li>
                    ))}
                  </ul>
                </>
              ) : (
                <a
                  class:list={[
                    'hover:text-link dark:hover:text-white px-4 py-3 flex items-center whitespace-nowrap',
                    { 'aw-link-active': href === currentPath },
                  ]}
                  href={href}
                >
                  {text}
                </a>
              )}
            </li>
          ))
        }
      </ul>
    </nav>


    <div
      class:list={[
        { 'ml-auto rtl:ml-0 rtl:mr-auto': position === 'left' },
        'self-center sm:flex items-center sm:mb-0  w-full sm:w-auto sm:static justify-end left-0 rtl:left-auto rtl:right-0  p-3 sm:p-0 sm:justify-self-end',
      ]}
    >
      <div class="items-center flex justify-between w-auto z-60">
        <div class="flex">
          {showToggleTheme && <ToggleTheme iconClass="w-4 h-4 sm:w-5 sm:h-5 sm:inline-block z-60" />}
         
        </div>
        {
          actions?.length ? (
            <span class="ml-4 rtl:ml-0 rtl:mr-4">
              {actions.map((btnProps) => (
                <Button {...btnProps} class="ml-2 py-1 px-3 sm:px-6 sm:py-2 font-semibold shadow-none text-sm md:text-base w-auto" />
              ))}
            </span>
          ) : (
            ''
          )
        }
      </div>
    </div>
  </div>
</header>
