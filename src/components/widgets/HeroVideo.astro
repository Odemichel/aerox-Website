---
import { DEFAULT_LOCALE, getDict, SUPPORTED_LOCALES, t, type Locale } from '~/lib/i18n';
import posterPuissance from '../../assets/images/posterPuissance.jpg?url';
import type { HeroVideo as Props } from '~/types';

const { video, id, bg } = Astro.props as Props;

// 🔹 Détection automatique de la langue depuis l’URL
const segments = Astro.url.pathname.split('/').filter(Boolean);
const currentLang: Locale = SUPPORTED_LOCALES.includes(segments[0] as Locale)
  ? (segments[0] as Locale)
  : DEFAULT_LOCALE;

// 🔹 Chargement du dictionnaire correspondant
const dict = getDict(currentLang);
---

<section class="relative max-h-full md:-mt-[76px] not-prose" {...id ? { id } : {}}>
  <div class="absolute inset-0 pointer-events-none" aria-hidden="true">
    <slot name="bg">
      {bg ? <Fragment set:html={bg} /> : null}
    </slot>
  </div>

  <div class="relative max-w-7xl mx-auto px-4 sm:px-6">
    <div class="intersect-once intersect-no-queue intersect-quarter motion-safe:opacity-0 motion-safe:intersect:animate-fade">
      {video ? (
        <figure class="relative m-auto mt-12 mb-24 md:max-w-3xl max-w-5xl items-center text-center">
          <h2 class="sr-only">{t(dict, 'hero.video.title')}</h2>

          <video
            id="hero-video"
            autoplay
            muted
            loop
            playsinline
            poster={posterPuissance ?? ''}
            class="mx-auto rounded-md w-full shadow-lg"
            title={t(dict, 'hero.video.title')}
            aria-label={t(dict, 'hero.video.aria')}
          >
            <source src={video.src} type="video/mp4" />
          </video>

          <figcaption class="italic text-muted">
            {t(dict, 'hero.video.caption')}
          </figcaption>
        </figure>
      ) : null}
    </div>
  </div>
</section>

<script is:inline>
  (() => {
    function initVideo() {
      const vid = document.getElementById('hero-video');
      if (!vid) return;

      try {
        vid.currentTime = 0;
        vid.play().catch(() => {});
      } catch (e) {
        console.warn('⚠️ Impossible de rejouer la vidéo:', e);
      }
    }

    // 🔁 Relance après navigation Astro
    document.addEventListener('astro:after-swap', () => {
      requestAnimationFrame(initVideo);
    });

    // 🔹 Premier lancement
    document.addEventListener('DOMContentLoaded', initVideo);
  })();
</script>
