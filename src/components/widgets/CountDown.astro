---
const { targetDate } = Astro.props as { targetDate: Date };
---

<span id="countdown-timer" data-target-date={targetDate.toISOString()} class="inline-block font-bold text-content">
  0j 00h 00m 00s
</span>

<script is:inline>
  (() => {
    const pad = (n) => String(n).padStart(2, '0');

    function initCountdown() {
      const el = document.getElementById('countdown-timer');
      if (!el) return;

      const attr = el.getAttribute('data-target-date');
      if (!attr) { el.textContent = '0j 00h 00m 00s'; return; }

      const target = new Date(attr).getTime();
      if (isNaN(target)) { el.textContent = '0j 00h 00m 00s'; return; }

      function update() {
        const diff = target - Date.now();
        if (diff <= 0) {
          el.textContent = '🎯 0j 00h 00m 00s';
          clearInterval(interval);
          return;
        }
        const j = Math.floor(diff / 86400000);
        const h = Math.floor((diff / 3600000) % 24);
        const m = Math.floor((diff / 60000) % 60);
        const s = Math.floor((diff / 1000) % 60);
        el.textContent = `${j}j ${pad(h)}h ${pad(m)}m ${pad(s)}s`;
      }

      update();
      const interval = setInterval(update, 1000);

      // 🔹 Nettoyage si on navigue avant la fin du compte à rebours
      document.addEventListener('astro:before-swap', () => clearInterval(interval), { once: true });
    }

    // Premier lancement
    initCountdown();

    // 🔁 Redémarre après navigation client-side (View Transitions)
    document.addEventListener('astro:after-swap', () => {
      requestAnimationFrame(initCountdown);
    });
  })();
</script>
