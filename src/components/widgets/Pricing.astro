---
import { Icon } from 'astro-icon/components';
import Button from '~/components/ui/Button.astro';
import Headline from '~/components/ui/Headline.astro';
import WidgetWrapper from '~/components/ui/WidgetWrapper.astro';
import CountDown from './CountDown.astro';
import { COUNTDOWN_TARGET } from '~/config/countdown';
import {  type Locale, getDict, t } from '~/lib/i18n';

const {
  title = '',
  subtitle = '',
  tagline = '',
  prices = [],
  subsubtitle = '',
  id,
  isDark = false,
  classes = {},
  bg = await Astro.slots.render('bg'),
} = Astro.props;

// ✅ Détermine la langue à partir de l’URL
const lang = (Astro.params.lang as Locale) ?? 'fr';
const dict = getDict(lang);
---

<WidgetWrapper id={id} isDark={isDark} containerClass={`max-w-7xl mx-auto ${classes?.container ?? ''}`} bg={bg}>
  <Headline title={title} subtitle={subtitle} subsubtitle={subsubtitle} tagline={tagline} />

  <div class="flex items-stretch justify-center">
    <div class="grid grid-cols-3 gap-4 dark:text-white sm:grid-cols-2 md:grid-cols-2 lg:grid-cols-3 xl:grid-cols-3">
      {
        prices &&
          prices.map((plan, idx) => {
            const {
              // Fallback simple
              title,
              subtitle,
              price,
              period,
              items,
              callToAction,

              // Carte switchable
              hasChoice = false,
              title1,
              title2,
              subtitle1,
              subtitle2,
              price1,
              price2,
              period1,
              period2,
              items1 = [],
              items2 = [],
              callToAction1,
              callToAction2,
              countdownTarget1,
              countdownTarget,
              countdownTarget2,
              hasRibbon = false,
              ribbonTitle,
            } = plan;

            const cardId = `price-card-${idx}`;

            return (
              <div class="col-span-3 mx-auto flex w-full sm:col-span-1 md:col-span-1 lg:col-span-1 xl:col-span-1 intersect-once motion-safe:md:intersect:animate-fade motion-safe:md:opacity-0 intersect-quarter">
                <div
                  id={cardId}
                  class="relative rounded-lg backdrop-blur border border-gray-200 dark:border-gray-700 bg-white dark:bg-slate-900 shadow px-6 py-8 flex w-full max-w-sm flex-col justify-between text-center"
                  data-choice={hasChoice ? '1' : 'single'}
                >
                  {/* Ruban */}
                  {hasRibbon && ribbonTitle && (
                    <div class="absolute right-[-5px] top-[-5px] z-[1] h-[100px] w-[100px] overflow-hidden text-right">
                      <span class="absolute top-[19px] right-[-21px] block w-full rotate-45 bg-green-700 text-center text-[14px] font-bold uppercase leading-5 text-white shadow-[0_3px_10px_-5px_rgba(0,0,0,0.3)]">
                        {ribbonTitle}
                      </span>
                    </div>
                  )}

                  <div class="px-2 py-0">
                    {/* ----- Switch titres ----- */}
                    {!hasChoice ? (
                      <h3 class="text-center text-xl font-semibold uppercase leading-6 tracking-wider mb-2">{title}</h3>
                    ) : (
                      <>
                        {' '}
                        <h3 class="text-center text-xl font-semibold uppercase leading-6 tracking-wider mb-2">
                          {title}
                        </h3>
                        <div class="font-light sm:text-lg text-gray-600 dark:text-slate-400 mb-4">{subtitle}</div>
                        <div class=" inline-flex rounded-md  overflow-hidden" role="tablist" aria-label="Type d’offre">
                          <button
                            type="button"
                            role="tab"
                            aria-selected="true"
                            data-action="select-variant"
                            data-value="1"
                            class="px-3 py-1.5 text-xl font-semibold uppercase leading-6 tracking-wider  data-[active=true]:bg-muted data-[active=true]:text-secondary text-muted"
                          >
                            {title1}
                          </button>
                          <button
                            type="button"
                            role="tab"
                            aria-selected="false"
                            data-action="select-variant"
                            data-value="2"
                            class="px-3 py-1.5 text-xl font-semibold uppercase leading-6 tracking-wider data-[active=true]:bg-muted data-[active=true]:text-secondary text-muted"
                          >
                            {title2}
                          </button>
                        </div>
                      </>
                    )}

                    {/* ----- Sous-titres ----- */}
                    <div class="min-h-[1.75rem]">
                      {!hasChoice ? (
                        subtitle ? (
                          typeof subtitle === 'string' ? (
                            <p class="font-light sm:text-lg text-gray-600 dark:text-slate-400" set:html={subtitle} />
                          ) : (
                            <div class="font-light sm:text-lg text-gray-600 dark:text-slate-400">{subtitle}</div>
                          )
                        ) : null
                      ) : (
                        <>
                          <p
                            class="font-light sm:text-lg text-gray-600 dark:text-slate-400"
                            data-v="1"
                            set:html={subtitle1 || ''}
                          />
                          <p
                            class="font-light sm:text-lg text-gray-600 dark:text-slate-400"
                            data-v="2"
                            set:html={subtitle2 || ''}
                          />
                        </>
                      )}
                    </div>

                    {/* ----- Countdown (optionnel) ----- */}
                    {hasChoice && (
                      <>
                        {countdownTarget1 && (
                          <p class="mt-1 text-sm font-medium text-primary" data-v="1">
                            {t(dict, 'pricing.remaining')} <CountDown targetDate={new Date(countdownTarget1)} /><br />
                            {t(dict, 'pricing.offer')}
                          </p>
                        )}
                        {countdownTarget2 && (
                          <p class="mt-1 text-sm font-medium text-primary" data-v="1">
                            {t(dict, 'pricing.remaining')} <CountDown targetDate={new Date(countdownTarget2)} /><br />
                            {t(dict, 'pricing.offer')}
                          </p>
                        )}
                      </>
                    )}

                    {/* ----- Prix ----- */}
                    <div class="my-8">
                      {!hasChoice ? (
                        <>
                          <div class="flex flex-col items-center justify-center text-center mb-1">
                            <div class="flex items-center justify-center">
                              <span class="text-5xl">€</span>
                              <span class="text-6xl font-extrabold">{price}</span>
                            </div>
                            <span class="text-base leading-6 lowercase text-gray-600 dark:text-slate-400">
                              {period}
                            </span>
                          </div>
                        </>
                      ) : (
                        <>
                          <div class="flex flex-col items-center justify-center text-center mb-4" data-v="1">
                            <div class="flex items-center justify-center">
                              <span class="text-5xl">€</span>
                              <span class="text-6xl font-extrabold">{price1}</span>
                            </div>
                            <span class="text-base leading-6 lowercase text-gray-600 dark:text-slate-400">
                              {period1}
                            </span>
                          </div>

                          <div class="flex flex-col items-center justify-center text-center" data-v="2">
                            <div class="flex items-center justify-center">
                              <span class="text-5xl">€</span>
                              <span class="text-6xl font-extrabold">{price2}</span>
                            </div>
                            <span class="text-base leading-6 lowercase text-gray-600 dark:text-slate-400">
                              {period2}
                            </span>
                          </div>
                        </>
                      )}
                    </div>

                    {/* ----- Avantages ----- */}
                    {!hasChoice ? (
                      items && (
                        <ul class="my-8 md:my-10 space-y-2 text-left">
                          {items.map(
                            ({ description, icon }) =>
                              description && (
                                <li class="mb-1.5 flex items-start space-x-3 leading-7">
                                  <div class="rounded-full bg-green-700 mt-1">
                                    <Icon name={icon || 'tabler:check'} class="w-6 h-6 font-bold p-1 text-white" />
                                  </div>
                                  <span>{description}</span>
                                </li>
                              )
                          )}
                        </ul>
                      )
                    ) : (
                      <>
                        <ul class="my-8 md:my-10 space-y-2 text-left" data-v="1">
                          {items1.map(
                            ({ description, icon }) =>
                              description && (
                                <li class="mb-1.5 flex items-start space-x-3 leading-7">
                                  <div class="rounded-full bg-green-700 mt-1">
                                    <Icon name={icon || 'tabler:check'} class="w-6 h-6 font-bold p-1 text-white" />
                                  </div>
                                  <span>{description}</span>
                                </li>
                              )
                          )}
                        </ul>
                        <ul class="my-8 md:my-10 space-y-2 text-left" data-v="2">
                          {items2.map(
                            ({ description, icon }) =>
                              description && (
                                <li class="mb-1.5 flex items-start space-x-3 leading-7">
                                  <div class="rounded-full bg-green-700 mt-1">
                                    <Icon name={icon || 'tabler:check'} class="w-6 h-6 font-bold p-1 text-white" />
                                  </div>
                                  <span>{description}</span>
                                </li>
                              )
                          )}
                        </ul>
                      </>
                    )}
                  </div>

                  {/* ----- CTA ----- */}
                  <div class="flex justify-center">
                    {!hasChoice ? (
                      typeof callToAction === 'string' ? (
                        <Fragment set:html={callToAction} />
                      ) : (
                        callToAction && <Button {...(hasRibbon ? { variant: 'primary' } : {})} {...callToAction} />
                      )
                    ) : (
                      <>
                        {callToAction1?.href && (
                          <Button data-v="1" {...(hasRibbon ? { variant: 'primary' } : {})} {...callToAction1} />
                        )}
                        {callToAction2?.href && (
                          <Button data-v="2" {...(hasRibbon ? { variant: 'primary' } : {})} {...callToAction2} />
                        )}
                      </>
                    )}
                  </div>
                  {countdownTarget && (
                    <p class="mt-1 text-sm font-medium text-primary" data-v="1">
                      {t(dict, 'pricing.remaining')} <CountDown targetDate={new Date(COUNTDOWN_TARGET)} /> <br />
                      {t(dict, 'pricing.offer')}
                    </p>
                  )}
                </div>
              </div>
            );
          })
      }
    </div>
  </div>
</WidgetWrapper>
<style is:inline>
  /* Carte single : on ignore les data-v */
  [data-choice='single'] [data-v] {
    display: inline;
  }

  /* Choix = 1 : on montre v1, on cache v2 */
  [data-choice='1'] [data-v='1'] {
    display: inline;
  }
  [data-choice='1'] [data-v='2'] {
    display: none;
  }

  /* Choix = 2 : on montre v2, on cache v1 */
  [data-choice='2'] [data-v='1'] {
    display: none;
  }
  [data-choice='2'] [data-v='2'] {
    display: inline;
  }
</style>

<script>
  document.addEventListener('click', (ev) => {
    const target = ev.target;
    if (!(target instanceof HTMLElement)) return;

    const btn = target.closest('[data-action="select-variant"]');
    if (!(btn instanceof HTMLElement)) return;

    const card = btn.closest('[data-choice]');
    if (!(card instanceof HTMLElement)) return;

    const value = btn.getAttribute('data-value'); // "1" ou "2"
    if (value !== '1' && value !== '2') return;

    // Bascule
    card.setAttribute('data-choice', value);

    // Mets à jour l'état visuel / ARIA
    card.querySelectorAll('[data-action="select-variant"]').forEach((b) => {
      const active = b.getAttribute('data-value') === value;
      b.setAttribute('data-active', active ? 'true' : 'false');
      b.setAttribute('aria-selected', String(active));
    });
  });

  // Init par défaut
  document.querySelectorAll('[data-choice]').forEach((card) => {
    if (card.getAttribute('data-choice') === 'single') return;

    const btn1 = card.querySelector('[data-action="select-variant"][data-value="1"]');
    const btn2 = card.querySelector('[data-action="select-variant"][data-value="2"]');

    if (btn1) {
      btn1.setAttribute('data-active', 'true');
      btn1.setAttribute('aria-selected', 'true');
    }
    if (btn2) {
      btn2.setAttribute('data-active', 'false');
      btn2.setAttribute('aria-selected', 'false');
    }
  });
</script>
