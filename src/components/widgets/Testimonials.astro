---
import Image from '~/components/common/Image.astro';
import Button from '~/components/ui/Button.astro';
import Headline from '~/components/ui/Headline.astro';
import WidgetWrapper from '~/components/ui/WidgetWrapper.astro';
import type { Testimonials as Props } from '~/types';

// Props
const {
  title = '',
  subtitle = '',
  tagline = '',
  testimonials = [],
  id,
  isDark = false,
  classes = {},
  bg = await Astro.slots.render('bg'),
} = Astro.props;
const actionsSlot = await Astro.slots.render('actions');
const { callToAction } = Astro.props;
const ctas = Array.isArray(callToAction) ? callToAction : callToAction ? [callToAction] : [];

// id unique pour le carrousel
const carouselId = `testi-${Math.random().toString(36).slice(2, 8)}`;
---

<WidgetWrapper id={id} isDark={isDark} containerClass={`max-w-6xl mx-auto ${classes?.container ?? ''}`} bg={bg}>
  <Headline title={title} subtitle={subtitle} tagline={tagline} />

  {
    testimonials?.length > 0 && (
      <div class="relative">
        {/* Boutons nav (optionnels) */}
        <button
          type="button"
          aria-label="Précédent"
          class="hidden sm:flex absolute left-2 top-1/2 -translate-y-1/2 z-10
               h-9 w-9 rounded-full bg-black/30 hover:bg-black/50 text-white
               items-center justify-center"
          data-prev
        >
          ‹
        </button>

        <button
          type="button"
          aria-label="Suivant"
          class="hidden sm:flex absolute right-2 top-1/2 -translate-y-1/2 z-10
               h-9 w-9 rounded-full bg-black/30 hover:bg-black/50 text-white
               items-center justify-center"
          data-next
        >
          ›
        </button>

        {/* Carrousel */}
        <div
          id={carouselId}
          class="flex overflow-x-auto snap-x snap-mandatory gap-6 px-6 -mx-6 scroll-px-6
               hide-native-scroll"
          aria-label="Témoignages"
        >
          {testimonials.map(({ title, testimonial, name, job, image, profile }) => (
            <article
              class="snap-center shrink-0  min-w-[320px] xl:min-w-[340px] max-w-[30%]
         bg-white/5 rounded-2xl p-0 sm:p-0 relative flex flex-col h-min"
            >
              <div class="flex flex-col p-4 md:p-6 rounded-md shadow-xl dark:shadow-none dark:border dark:border-slate-600 h-auto">
                {/* IMAGE réelle + TEXTE du témoignage (layout conservé) */}
                <div class="flex gap-4">
                  <div class="flex flex-col justify-center">
                    {title && <h2 class="text-lg font-medium leading-6 mb-2">{title}</h2>}
                    {testimonial && (
                      <blockquote>
                        <p class="text-accent italic" set:html={testimonial} />
                      </blockquote>
                    )}
                  </div>

                  {image && (
                    <div class="flex-shrink-0 rounded-xl overflow-hidden border border-slate-200 dark:border-slate-600 max-w-[120px]">
                      <Image class="w-full h-full object-cover" width={120} {...image} />
                    </div>
                  )}
                </div>

                <hr class="border-slate-200 dark:border-slate-600 my-4" />

                {/* Avatar + nom + job */}
                <div class="flex items-center">
                  {profile && (
                    <div class="h-13 w-13 rounded-full overflow-hidden border border-slate-200 dark:border-slate-600">
                      <Image class="h-full w-full object-cover" width={70} height={70} {...profile} />
                    </div>
                  )}
                  <div class="ml-3 rtl:ml-0 rtl:mr-3">
                    {name && <p class="text-base font-semibold">{name}</p>}
                    {job && <p class="text-xs text-muted" set:html={job} />}
                  </div>
                </div>
              </div>
            </article>
          ))}
        </div>
        <div class="fakebar" data-fakebar>
          <div class="thumb" data-thumb />
        </div>
      </div>
    )
  }
  {
    actionsSlot ? (
      // 1) Si un slot `actions` est fourni (comme le Hero), on l’affiche tel quel
      <div
        class=" max-w-xs sm:max-w-md m-auto flex flex-nowrap flex-col sm:flex-row sm:justify-center gap-2
              intersect-once intersect-quarter motion-safe:md:opacity-0 motion-safe:md:intersect:animate-fade"
      >
        <Fragment set:html={actionsSlot} />
      </div>
    ) : ctas.length > 0 ? (
      // 2) Sinon on rend des <Button /> à partir des objets (même rendu que le Hero)
      <div
        class="mt-5 max-w-xs sm:max-w-md m-auto flex flex-nowrap flex-col sm:flex-row sm:justify-center gap-2
              intersect-once intersect-quarter motion-safe:md:opacity-0 motion-safe:md:intersect:animate-fade"
      >
        {ctas.map((action) => (
          <div class="flex w-full sm:w-auto  ">
            <Button {...(action || {})} class="w-full py-2 mt-4  sm:mb-4 " />
          </div>
        ))}
      </div>
    ) : null
  }
</WidgetWrapper>

<style is:inline>
  /* Optionnel: scrollbars plus propres */
  .scrollbar-custom::-webkit-scrollbar {
    height: 8px;
  }
  .scrollbar-custom::-webkit-scrollbar-thumb {
    background: rgba(255, 255, 255, 0.2);
    border-radius: 4px;
  }
  .scrollbar-custom {
    scrollbar-color: rgba(255, 187, 1, 0.45) transparent;
  }
</style>

<script define:vars={{ carouselId }}>
  const wrap = document.getElementById(carouselId);
  if (!wrap) console.warn('Carousel témoignages introuvable:', carouselId);

  // Flèches
  const container = wrap?.parentElement;
  const prevBtn = container?.querySelector('[data-prev]');
  const nextBtn = container?.querySelector('[data-next]');

  const scrollByPage = (dir = 1) => {
    if (!wrap) return;
    const delta = wrap.clientWidth * 0.9 * dir; // ~1 "page"
    wrap.scrollBy({ left: delta, behavior: 'smooth' });
  };

  prevBtn?.addEventListener('click', () => scrollByPage(-1));
  nextBtn?.addEventListener('click', () => scrollByPage(1));

  // Navigation clavier (← →) quand le carrousel est focus
  wrap?.addEventListener('keydown', (e) => {
    if (e.key === 'ArrowRight') {
      e.preventDefault();
      scrollByPage(1);
    }
    if (e.key === 'ArrowLeft') {
      e.preventDefault();
      scrollByPage(-1);
    }
  });

  const scroller = wrap; // réutilise la même ref
  const fake = scroller?.parentElement?.querySelector('[data-fakebar]');
  const thumb = fake?.querySelector('[data-thumb]');
  let hideT;

  const syncFakebar = () => {
    if (!scroller || !fake || !thumb) return;

    const trackW = fake.clientWidth; // largeur visible (80%)
    const contentW = scroller.scrollWidth;
    const viewportW = scroller.clientWidth;
    const maxScroll = Math.max(1, contentW - viewportW);

    // largeur du thumb proportionnelle (min 32px)
    const ratio = Math.min(1, viewportW / contentW);
    const thumbW = Math.max(trackW / 6, Math.round(trackW * ratio));
    thumb.style.width = `${thumbW}px`;

    // position du thumb
    const x = (scroller.scrollLeft / maxScroll) * (trackW - thumbW);
    thumb.style.transform = `translateX(${x}px)`;
  };

  const showThenHide = () => {
    if (!fake) return;
    fake.classList.add('show');
    clearTimeout(hideT);
    hideT = setTimeout(() => fake.classList.remove('show'), 50);
  };

  if (scroller && fake) {
    // init + blink
    syncFakebar();
    showThenHide();
    setTimeout(() => fake.classList.remove('show'), 50);

    scroller.addEventListener(
      'scroll',
      () => {
        syncFakebar();
        showThenHide();
      },
      { passive: true }
    );

    // Recalcule si la taille change (images, responsive…)
    const ro = new ResizeObserver(syncFakebar);
    ro.observe(scroller);
    ro.observe(fake);
    window.addEventListener('resize', syncFakebar);
  }
</script>
