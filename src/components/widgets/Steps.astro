---
import Headline from '~/components/ui/Headline.astro';
import Timeline from '~/components/ui/Timeline.astro';
import WidgetWrapper from '~/components/ui/WidgetWrapper.astro';
import type { Steps as Props } from '~/types';
import Button from '../ui/Button.astro';

const {
  title = await Astro.slots.render('title'),
  subtitle = await Astro.slots.render('subtitle'),
  tagline = await Astro.slots.render('tagline'),
  items = [],
  image = await Astro.slots.render('image'),
  isReversed = false,
  actions = await Astro.slots.render('actions'),

  id,
  isDark = false,
  classes = {},
  bg = await Astro.slots.render('bg'),
} = Astro.props;
---

<WidgetWrapper id={id} isDark={isDark} containerClass={`max-w-5xl ${classes?.container ?? ''}`} bg={bg}>
  <div class:list={['flex  gap-8 md:gap-12', { 'md:flex-row-reverse': isReversed }, { 'md:flex-row': image }]}>
    <div class:list={['md:py-4 md:self-center', { 'md:basis-1/2': image }, { 'w-full': !image }]}>
      <Headline
        title={title}
        subtitle={subtitle}
        tagline={tagline}
        classes={{
          container: 'text-left rtl:text-right',
          title: 'text-3xl lg:text-4xl',
          ...((classes?.headline as object) ?? {}),
        }}
      />
      <Timeline items={items} classes={classes?.items as Record<string, never>} />

      {
        actions && (
          <div class="max-w-xs sm:max-w-md m-auto flex flex-nowrap flex-col sm:flex-row sm:justify-center gap-2 intersect-once intersect-quarter motion-safe:opacity-0 motion-safe:intersect:animate-fade">
            {Array.isArray(actions) ? (
              actions.map((action) => (
                <div class="flex w-full sm:w-auto">
                  <Button {...(action || {})} class="w-full sm:mb-10" />
                </div>
              ))
            ) : (
              <Fragment set:html={actions} />
            )}
          </div>
        )
      }
    </div>

   
  </div>
</WidgetWrapper>
